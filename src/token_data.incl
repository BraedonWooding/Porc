/* Auto Generated File */
static const char *tokenToStrMap[(int)TokenType::NUM_TOKENS] = {
    [(int)TokenType::Comma] = ",",
    [(int)TokenType::SemiColon] = ";",
    [(int)TokenType::LeftParen] = "(",
    [(int)TokenType::RightParen] = ")",
    [(int)TokenType::LeftBrace] = "{",
    [(int)TokenType::RightBrace] = "}",
    [(int)TokenType::LeftBracket] = "[",
    [(int)TokenType::RightBracket] = "]",
    [(int)TokenType::LineComment] = "//",
    [(int)TokenType::BlockComment] = "/*",
    [(int)TokenType::LessThan] = "<",
    [(int)TokenType::GreaterThan] = ">",
    [(int)TokenType::Equal] = "==",
    [(int)TokenType::NotEqual] = "!=",
    [(int)TokenType::LessThanEqual] = "<=",
    [(int)TokenType::GreaterThanEqual] = ">=",
    [(int)TokenType::Negate] = "!",
    [(int)TokenType::And] = "&&",
    [(int)TokenType::Or] = "||",
    [(int)TokenType::Increment] = "++",
    [(int)TokenType::Decrement] = "--",
    [(int)TokenType::Add] = "+",
    [(int)TokenType::Subtract] = "-",
    [(int)TokenType::Divide] = "/",
    [(int)TokenType::Multiply] = "*",
    [(int)TokenType::Power] = "**",
    [(int)TokenType::Modulus] = "%",
    [(int)TokenType::IntegerDivide] = "%/",
    [(int)TokenType::Assign] = "=",
    [(int)TokenType::AddAssign] = "+=",
    [(int)TokenType::SubtractAssign] = "-=",
    [(int)TokenType::MultiplyAssign] = "*=",
    [(int)TokenType::DivideAssign] = "/=",
    [(int)TokenType::PowerAssign] = "**=",
    [(int)TokenType::IntegerDivideAssign] = "%/=",
    [(int)TokenType::ModulusAssign] = "%=",
    [(int)TokenType::FatArrow] = "=>",
    [(int)TokenType::LeftArrow] = "<-",
    [(int)TokenType::RightArrow] = "->",
    [(int)TokenType::Colon] = ":",
    [(int)TokenType::DoubleColon] = "::",
    [(int)TokenType::Implements] = "^",
    [(int)TokenType::Variant] = "|",
    [(int)TokenType::Dot] = ".",
    [(int)TokenType::Range] = "..",
    [(int)TokenType::Macro] = "@",
    [(int)TokenType::Ternary] = "?",
    [(int)TokenType::Func] = "fn",
    [(int)TokenType::Return] = "return",
    [(int)TokenType::While] = "while",
    [(int)TokenType::For] = "for",
    [(int)TokenType::Break] = "break",
    [(int)TokenType::Continue] = "continue",
    [(int)TokenType::If] = "if",
    [(int)TokenType::Else] = "else",
};

static const char *tokenToNameMap[(int)TokenType::NUM_TOKENS] = {
    [(int)TokenType::Undefined] = "Undefined",
    [(int)TokenType::Nil] = "Nil",
    [(int)TokenType::Bool] = "Bool",
    [(int)TokenType::Identifier] = "Identifier",
    [(int)TokenType::Str] = "Str",
    [(int)TokenType::Flt] = "Flt",
    [(int)TokenType::Int] = "Int",
    [(int)TokenType::Char] = "Char",
    [(int)TokenType::EndOfFile] = "EndOfFile",
    [(int)TokenType::Comma] = "Comma",
    [(int)TokenType::SemiColon] = "SemiColon",
    [(int)TokenType::LeftParen] = "LeftParen",
    [(int)TokenType::RightParen] = "RightParen",
    [(int)TokenType::LeftBrace] = "LeftBrace",
    [(int)TokenType::RightBrace] = "RightBrace",
    [(int)TokenType::LeftBracket] = "LeftBracket",
    [(int)TokenType::RightBracket] = "RightBracket",
    [(int)TokenType::LineComment] = "LineComment",
    [(int)TokenType::BlockComment] = "BlockComment",
    [(int)TokenType::LessThan] = "LessThan",
    [(int)TokenType::GreaterThan] = "GreaterThan",
    [(int)TokenType::Equal] = "Equal",
    [(int)TokenType::NotEqual] = "NotEqual",
    [(int)TokenType::LessThanEqual] = "LessThanEqual",
    [(int)TokenType::GreaterThanEqual] = "GreaterThanEqual",
    [(int)TokenType::Negate] = "Negate",
    [(int)TokenType::And] = "And",
    [(int)TokenType::Or] = "Or",
    [(int)TokenType::Increment] = "Increment",
    [(int)TokenType::Decrement] = "Decrement",
    [(int)TokenType::Add] = "Add",
    [(int)TokenType::Subtract] = "Subtract",
    [(int)TokenType::Divide] = "Divide",
    [(int)TokenType::Multiply] = "Multiply",
    [(int)TokenType::Power] = "Power",
    [(int)TokenType::Modulus] = "Modulus",
    [(int)TokenType::IntegerDivide] = "IntegerDivide",
    [(int)TokenType::Assign] = "Assign",
    [(int)TokenType::AddAssign] = "AddAssign",
    [(int)TokenType::SubtractAssign] = "SubtractAssign",
    [(int)TokenType::MultiplyAssign] = "MultiplyAssign",
    [(int)TokenType::DivideAssign] = "DivideAssign",
    [(int)TokenType::PowerAssign] = "PowerAssign",
    [(int)TokenType::IntegerDivideAssign] = "IntegerDivideAssign",
    [(int)TokenType::ModulusAssign] = "ModulusAssign",
    [(int)TokenType::FatArrow] = "FatArrow",
    [(int)TokenType::LeftArrow] = "LeftArrow",
    [(int)TokenType::RightArrow] = "RightArrow",
    [(int)TokenType::Colon] = "Colon",
    [(int)TokenType::DoubleColon] = "DoubleColon",
    [(int)TokenType::Implements] = "Implements",
    [(int)TokenType::Variant] = "Variant",
    [(int)TokenType::Dot] = "Dot",
    [(int)TokenType::Range] = "Range",
    [(int)TokenType::Macro] = "Macro",
    [(int)TokenType::Ternary] = "Ternary",
    [(int)TokenType::Func] = "Func",
    [(int)TokenType::Return] = "Return",
    [(int)TokenType::While] = "While",
    [(int)TokenType::For] = "For",
    [(int)TokenType::Break] = "Break",
    [(int)TokenType::Continue] = "Continue",
    [(int)TokenType::If] = "If",
    [(int)TokenType::Else] = "Else",
};

struct TokenSet {
    int *tokens;
    TokenSet *child_tokens;
};

static const TokenSet tokenFromStrMap = {
    (int[ASCII_SET]){
        [','] = (int)TokenType::Comma,
        [';'] = (int)TokenType::SemiColon,
        ['('] = (int)TokenType::LeftParen,
        [')'] = (int)TokenType::RightParen,
        ['{'] = (int)TokenType::LeftBrace,
        ['}'] = (int)TokenType::RightBrace,
        ['['] = (int)TokenType::LeftBracket,
        [']'] = (int)TokenType::RightBracket,
        ['<'] = (int)TokenType::LessThan,
        ['>'] = (int)TokenType::GreaterThan,
        ['!'] = (int)TokenType::Negate,
        ['+'] = (int)TokenType::Add,
        ['-'] = (int)TokenType::Subtract,
        ['/'] = (int)TokenType::Divide,
        ['*'] = (int)TokenType::Multiply,
        ['%'] = (int)TokenType::Modulus,
        ['='] = (int)TokenType::Assign,
        [':'] = (int)TokenType::Colon,
        ['^'] = (int)TokenType::Implements,
        ['|'] = (int)TokenType::Variant,
        ['.'] = (int)TokenType::Dot,
        ['@'] = (int)TokenType::Macro,
        ['?'] = (int)TokenType::Ternary,
    },
    (TokenSet[ASCII_SET]){
        ['/'] = {
            (int[ASCII_SET]){
                ['/'] = (int)TokenType::LineComment,
                ['*'] = (int)TokenType::BlockComment,
                ['='] = (int)TokenType::DivideAssign,
            },
            NULL,
        },
        ['='] = {
            (int[ASCII_SET]){
                ['='] = (int)TokenType::Equal,
                ['>'] = (int)TokenType::FatArrow,
            },
            NULL,
        },
        ['!'] = {
            (int[ASCII_SET]){
                ['='] = (int)TokenType::NotEqual,
            },
            NULL,
        },
        ['<'] = {
            (int[ASCII_SET]){
                ['='] = (int)TokenType::LessThanEqual,
                ['-'] = (int)TokenType::LeftArrow,
            },
            NULL,
        },
        ['>'] = {
            (int[ASCII_SET]){
                ['='] = (int)TokenType::GreaterThanEqual,
            },
            NULL,
        },
        ['&'] = {
            (int[ASCII_SET]){
                ['&'] = (int)TokenType::And,
            },
            NULL,
        },
        ['|'] = {
            (int[ASCII_SET]){
                ['|'] = (int)TokenType::Or,
            },
            NULL,
        },
        ['+'] = {
            (int[ASCII_SET]){
                ['+'] = (int)TokenType::Increment,
                ['='] = (int)TokenType::AddAssign,
            },
            NULL,
        },
    },
};
