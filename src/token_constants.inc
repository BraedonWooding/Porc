/* Auto Generated File */
const Token Token::Undefined = Token(Token::Kind::Undefined, LineRange::Null());
const Token Token::Identifier = Token(Token::Kind::Identifier, LineRange::Null());
const Token Token::Str = Token(Token::Kind::Str, LineRange::Null());
const Token Token::Flt = Token(Token::Kind::Flt, LineRange::Null());
const Token Token::Int = Token(Token::Kind::Int, LineRange::Null());
const Token Token::Char = Token(Token::Kind::Char, LineRange::Null());
const Token Token::EndOfFile = Token(Token::Kind::EndOfFile, LineRange::Null());
const Token Token::Comma = Token(Token::Kind::Comma, LineRange::Null());
const Token Token::SemiColon = Token(Token::Kind::SemiColon, LineRange::Null());
const Token Token::LeftParen = Token(Token::Kind::LeftParen, LineRange::Null());
const Token Token::RightParen = Token(Token::Kind::RightParen, LineRange::Null());
const Token Token::LeftBrace = Token(Token::Kind::LeftBrace, LineRange::Null());
const Token Token::RightBrace = Token(Token::Kind::RightBrace, LineRange::Null());
const Token Token::LeftBracket = Token(Token::Kind::LeftBracket, LineRange::Null());
const Token Token::RightBracket = Token(Token::Kind::RightBracket, LineRange::Null());
const Token Token::LineComment = Token(Token::Kind::LineComment, LineRange::Null());
const Token Token::BlockComment = Token(Token::Kind::BlockComment, LineRange::Null());
const Token Token::LessThan = Token(Token::Kind::LessThan, LineRange::Null());
const Token Token::GreaterThan = Token(Token::Kind::GreaterThan, LineRange::Null());
const Token Token::Equal = Token(Token::Kind::Equal, LineRange::Null());
const Token Token::NotEqual = Token(Token::Kind::NotEqual, LineRange::Null());
const Token Token::LessThanEqual = Token(Token::Kind::LessThanEqual, LineRange::Null());
const Token Token::GreaterThanEqual = Token(Token::Kind::GreaterThanEqual, LineRange::Null());
const Token Token::Negate = Token(Token::Kind::Negate, LineRange::Null());
const Token Token::And = Token(Token::Kind::And, LineRange::Null());
const Token Token::Or = Token(Token::Kind::Or, LineRange::Null());
const Token Token::Increment = Token(Token::Kind::Increment, LineRange::Null());
const Token Token::Decrement = Token(Token::Kind::Decrement, LineRange::Null());
const Token Token::Add = Token(Token::Kind::Add, LineRange::Null());
const Token Token::Subtract = Token(Token::Kind::Subtract, LineRange::Null());
const Token Token::Divide = Token(Token::Kind::Divide, LineRange::Null());
const Token Token::Multiply = Token(Token::Kind::Multiply, LineRange::Null());
const Token Token::Power = Token(Token::Kind::Power, LineRange::Null());
const Token Token::Modulus = Token(Token::Kind::Modulus, LineRange::Null());
const Token Token::IntegerDivide = Token(Token::Kind::IntegerDivide, LineRange::Null());
const Token Token::Assign = Token(Token::Kind::Assign, LineRange::Null());
const Token Token::AddAssign = Token(Token::Kind::AddAssign, LineRange::Null());
const Token Token::SubtractAssign = Token(Token::Kind::SubtractAssign, LineRange::Null());
const Token Token::MultiplyAssign = Token(Token::Kind::MultiplyAssign, LineRange::Null());
const Token Token::DivideAssign = Token(Token::Kind::DivideAssign, LineRange::Null());
const Token Token::PowerAssign = Token(Token::Kind::PowerAssign, LineRange::Null());
const Token Token::IntegerDivideAssign = Token(Token::Kind::IntegerDivideAssign, LineRange::Null());
const Token Token::ModulusAssign = Token(Token::Kind::ModulusAssign, LineRange::Null());
const Token Token::FatArrow = Token(Token::Kind::FatArrow, LineRange::Null());
const Token Token::LeftArrow = Token(Token::Kind::LeftArrow, LineRange::Null());
const Token Token::RightArrow = Token(Token::Kind::RightArrow, LineRange::Null());
const Token Token::Colon = Token(Token::Kind::Colon, LineRange::Null());
const Token Token::DoubleColon = Token(Token::Kind::DoubleColon, LineRange::Null());
const Token Token::Implements = Token(Token::Kind::Implements, LineRange::Null());
const Token Token::Variant = Token(Token::Kind::Variant, LineRange::Null());
const Token Token::Dot = Token(Token::Kind::Dot, LineRange::Null());
const Token Token::Range = Token(Token::Kind::Range, LineRange::Null());
const Token Token::Macro = Token(Token::Kind::Macro, LineRange::Null());
const Token Token::Ternary = Token(Token::Kind::Ternary, LineRange::Null());
const Token Token::True = Token(Token::Kind::True, LineRange::Null());
const Token Token::False = Token(Token::Kind::False, LineRange::Null());
const Token Token::Void = Token(Token::Kind::Void, LineRange::Null());
const Token Token::Const = Token(Token::Kind::Const, LineRange::Null());
const Token Token::Struct = Token(Token::Kind::Struct, LineRange::Null());
const Token Token::Func = Token(Token::Kind::Func, LineRange::Null());
const Token Token::Let = Token(Token::Kind::Let, LineRange::Null());
const Token Token::Return = Token(Token::Kind::Return, LineRange::Null());
const Token Token::While = Token(Token::Kind::While, LineRange::Null());
const Token Token::For = Token(Token::Kind::For, LineRange::Null());
const Token Token::Break = Token(Token::Kind::Break, LineRange::Null());
const Token Token::Continue = Token(Token::Kind::Continue, LineRange::Null());
const Token Token::In = Token(Token::Kind::In, LineRange::Null());
const Token Token::If = Token(Token::Kind::If, LineRange::Null());
const Token Token::Else = Token(Token::Kind::Else, LineRange::Null());
