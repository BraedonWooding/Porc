/* Auto Generated File */
const Token Token::Undefined = Token(Token::Undefined, LineRange::Null());
const Token Token::Identifier = Token(Token::Identifier, LineRange::Null());
const Token Token::Str = Token(Token::Str, LineRange::Null());
const Token Token::Flt = Token(Token::Flt, LineRange::Null());
const Token Token::Int = Token(Token::Int, LineRange::Null());
const Token Token::Char = Token(Token::Char, LineRange::Null());
const Token Token::EndOfFile = Token(Token::EndOfFile, LineRange::Null());
const Token Token::Comma = Token(Token::Comma, LineRange::Null());
const Token Token::SemiColon = Token(Token::SemiColon, LineRange::Null());
const Token Token::LeftParen = Token(Token::LeftParen, LineRange::Null());
const Token Token::RightParen = Token(Token::RightParen, LineRange::Null());
const Token Token::LeftBrace = Token(Token::LeftBrace, LineRange::Null());
const Token Token::RightBrace = Token(Token::RightBrace, LineRange::Null());
const Token Token::LeftBracket = Token(Token::LeftBracket, LineRange::Null());
const Token Token::RightBracket = Token(Token::RightBracket, LineRange::Null());
const Token Token::LineComment = Token(Token::LineComment, LineRange::Null());
const Token Token::BlockComment = Token(Token::BlockComment, LineRange::Null());
const Token Token::LessThan = Token(Token::LessThan, LineRange::Null());
const Token Token::GreaterThan = Token(Token::GreaterThan, LineRange::Null());
const Token Token::Equal = Token(Token::Equal, LineRange::Null());
const Token Token::NotEqual = Token(Token::NotEqual, LineRange::Null());
const Token Token::LessThanEqual = Token(Token::LessThanEqual, LineRange::Null());
const Token Token::GreaterThanEqual = Token(Token::GreaterThanEqual, LineRange::Null());
const Token Token::Negate = Token(Token::Negate, LineRange::Null());
const Token Token::And = Token(Token::And, LineRange::Null());
const Token Token::Or = Token(Token::Or, LineRange::Null());
const Token Token::Add = Token(Token::Add, LineRange::Null());
const Token Token::Subtract = Token(Token::Subtract, LineRange::Null());
const Token Token::Divide = Token(Token::Divide, LineRange::Null());
const Token Token::Multiply = Token(Token::Multiply, LineRange::Null());
const Token Token::Power = Token(Token::Power, LineRange::Null());
const Token Token::Modulus = Token(Token::Modulus, LineRange::Null());
const Token Token::IntegerDivide = Token(Token::IntegerDivide, LineRange::Null());
const Token Token::Assign = Token(Token::Assign, LineRange::Null());
const Token Token::AddAssign = Token(Token::AddAssign, LineRange::Null());
const Token Token::SubtractAssign = Token(Token::SubtractAssign, LineRange::Null());
const Token Token::MultiplyAssign = Token(Token::MultiplyAssign, LineRange::Null());
const Token Token::DivideAssign = Token(Token::DivideAssign, LineRange::Null());
const Token Token::PowerAssign = Token(Token::PowerAssign, LineRange::Null());
const Token Token::IntegerDivideAssign = Token(Token::IntegerDivideAssign, LineRange::Null());
const Token Token::ModulusAssign = Token(Token::ModulusAssign, LineRange::Null());
const Token Token::FatArrow = Token(Token::FatArrow, LineRange::Null());
const Token Token::LeftArrow = Token(Token::LeftArrow, LineRange::Null());
const Token Token::RightArrow = Token(Token::RightArrow, LineRange::Null());
const Token Token::ReturnType = Token(Token::ReturnType, LineRange::Null());
const Token Token::Colon = Token(Token::Colon, LineRange::Null());
const Token Token::DoubleColon = Token(Token::DoubleColon, LineRange::Null());
const Token Token::Implements = Token(Token::Implements, LineRange::Null());
const Token Token::Variant = Token(Token::Variant, LineRange::Null());
const Token Token::Dot = Token(Token::Dot, LineRange::Null());
const Token Token::Range = Token(Token::Range, LineRange::Null());
const Token Token::Macro = Token(Token::Macro, LineRange::Null());
const Token Token::True = Token(Token::True, LineRange::Null());
const Token Token::False = Token(Token::False, LineRange::Null());
const Token Token::Void = Token(Token::Void, LineRange::Null());
const Token Token::Const = Token(Token::Const, LineRange::Null());
const Token Token::Struct = Token(Token::Struct, LineRange::Null());
const Token Token::Func = Token(Token::Func, LineRange::Null());
const Token Token::Var = Token(Token::Var, LineRange::Null());
const Token Token::Return = Token(Token::Return, LineRange::Null());
const Token Token::While = Token(Token::While, LineRange::Null());
const Token Token::For = Token(Token::For, LineRange::Null());
const Token Token::Break = Token(Token::Break, LineRange::Null());
const Token Token::Continue = Token(Token::Continue, LineRange::Null());
const Token Token::In = Token(Token::In, LineRange::Null());
const Token Token::If = Token(Token::If, LineRange::Null());
const Token Token::Else = Token(Token::Else, LineRange::Null());
